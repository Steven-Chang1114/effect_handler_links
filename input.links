module Test {
  alien javascript "js/demo.js" {
    printResult : (String) ~%~> ();
    btnOnCLick : () ~%~> ();
  }
}

fun getNum() {
    do GetNum()
}

fun getNumCalc() {
    do GetNumCalc()
}

fun setNum(val) {
    do SetNum(val)
}

fun setNumCalc(val) {
    var newVal = getNumCalc() + val;
    do SetNumCalc(newVal)
}

fun useState(m) client {
    handle(m())(globalVar <- (num = 0, numCalc = 5)) {
        case SetNum(val, k) -> k(replaceNode(<div id="num">{intToXml(val)}</div>,getNodeById("num")), 
                                (globalVar with num = val))
        case GetNum(k) -> k(globalVar.num, globalVar)

        case SetNumCalc(val, k) -> k(replaceNode(<div id="numCalc">{intToXml(val)}</div>,getNodeById("numCalc")),
                                    (globalVar with numCalc = val))
        case GetNumCalc(k) -> k(globalVar.numCalc, globalVar)

        case Return(x) -> x
    }
}

fun manager() client {
    receive {
        case ShowResult(val) -> Test.printResult(val)
        case SetNumCalc(val) -> setNumCalc(val)
    };
    manager()
} 

fun mainPage() {
    var p = spawnClient { 
        useState(manager);
        Test.btnOnCLick()
    };
    page
        <html>
            <body>
                <form l:onkeyup="{p ! ShowResult(pre)}">
                    <input type="text" l:name="pre"
                        class="input" autocomplete="off"/>
                </form>
                <div id="result"></div>
            </body>
        </html>
}

fun main() {
  addRoute("/", fun(_) { mainPage() });
  addStaticRoute("/js", "js", [("js", "text/javascript")]);
  servePages()
}

main()