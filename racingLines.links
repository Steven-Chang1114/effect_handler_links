import Scheduler;
import Scheduler2;
import Scheduler3;
import LineDrawer;
import FiberInterface;

typename Canvas = ();
typename Point = (x:Int, y:Int);

alien javascript "js/runtime.js" {
    delayExecution: (Int) ~> ();
    sysEnqueue: (a) ~> ();
}

alien javascript "js/canvas.js" {
    drawCustomUnit: (Int, Int, Int, Int, String, Canvas) ~> ();
}

var colors = ["green", "red", "blue", "yellow"];
var allColors = ["red", "green", "blue", "yellow", "#801638", "#027878"];

#var priorities = [High, High, Low, Low];
var priorities = [];

# Page Functionality

sig drawHorizontalLine: (Point, Point, String) {Yield:() |e}~> ()
fun drawHorizontalLine(start, end, color){
    var div = getNodeById("box");
    var context = jsGetContext2D(div);
    var diff = LineDrawer.difference(end, start);
    fun aux(n, start){
        drawCustomUnit(start.x, start.y, 1, 25, color, context);
        FiberInterface.yield();
        #print("DELAY " ^^ intToString(n) ^^ ", " ^^ intToString(start.x) ^^ ", "  ^^intToString(start.y));
        delayExecution(10);
        if (n > 0) aux(n -1, (x = start.x + (diff.x / LineDrawer.absolute(diff.x)), y = start.y))
        else ()
    }
    aux(LineDrawer.absolute(diff.x), start)
}

sig drawLineInColor: (Point, Point, String) {Yield:() |e}~> ()
fun drawLineInColor(start, end, color){
    println("start drawing " ^^ color ^^ ", yield.");
    drawHorizontalLine((x=start.x, y=start.y), (x=end.x, y=end.y), color);
    println("finish drawing " ^^ color)
}

sig setUpLineDrawing: (String) ~> () {Yield:() |e}~> ()
fun setUpLineDrawing(color){
    var points = LineDrawer.getPoints();
    switch(points){
        case Nothing -> fun(){}
        case Just((start, end)) -> {
            LineDrawer.updatePoints(start.x, start.y + 40, end.x , end.y + 40);
            fun(){
                drawLineInColor(start, end, color)
            }
        }
    }
}

fun start(){
    FiberInterface.fork(FiberInterface.makeFiber(Low, FiberInterface.forever));
    fun aux(colors, prios){
        switch((colors, prios)){
            case ([],[]) -> ()
            case (x::xs, y::ys) -> FiberInterface.fork(FiberInterface.makeFiber(y, setUpLineDrawing(x))); aux(xs, ys)
            case (_, _) -> ()
        }
    }
    aux(colors, priorities)
}

fun buttonPressed(prio, color){
    var f = setUpLineDrawing(color);
    switch(prio){
        case "High" -> println("enqueue high"); sysEnqueue(FiberInterface.makeFiber(High, f))
        case "Medium" -> println("enqueue low"); sysEnqueue(FiberInterface.makeFiber(Medium, f))
        case "Low" -> println("enqueue low"); sysEnqueue(FiberInterface.makeFiber(Low, f))
        case _ -> ()
    }
}

# Web interface

#sig main_page : (_) ~> Page
fun main_page(schedule){

    var pId = spawnClient{schedule(FiberInterface.makeFiber(High, start))};

    page
    <html>
    <head>
        <link rel="stylesheet" href="css/racingLines.css" type="text/css" />
    </head>
    <body>
        <canvas id="box" width="400" height="600" class="box center block"></canvas>
        <div class="selection margin-10 center">
            <button class="block button center" l:onclick="{buttonPressed("Low", "red")}">Draw Low Line</button>
            <button class="block button center" l:onclick="{buttonPressed("Medium", "blue")}">Draw Medium Line</button>
            <button class="block button center" l:onclick="{buttonPressed("High", "green")}">Draw High Line</button>
        </div>
        <div class="links">
            <a href="/scheduler1.links">Scheduler 1</a>
            <a href="/scheduler2.links">Scheduler 2</a>
            <a href="/scheduler3.links">Scheduler 3</a>
        </div>
        <div id="data" display="none">
            <div id="start-x" value="10"></div>
            <div id="start-y" value="10"></div>
            <div id="end-x" value="390"></div>
            <div id="end-y" value="10"></div>
        </div>
    </body>
    </html>
}

sig main: () ~> ()
fun main() {
    addRoute("/", fun(_) {main_page(Scheduler.schedule)});
    addStaticRoute("/css", "css", [("css", "text/css")]);
    addRoute("/scheduler2.links", fun(_) {main_page(Scheduler2.schedule)});
    addRoute("/scheduler3.links", fun(_) {main_page(Scheduler3.schedule)});
    addStaticRoute("/js", "js", [("js", "text/javascript")]);

    servePages()
}

main()