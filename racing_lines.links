import Scheduler;

# Necessary functions for users: schedule, makeFiber, sysEnqueue, yield, fork

typename Canvas = ();
alien javascript "js/canvas.js" {
    drawUnit: (Int, Int, String, Canvas) ~> ();
    drawCustomUnit: (Int, Int, Int, Int, String, Canvas) ~> ();
    getValueFromSelection: (String) ~> String;
}

typename Point = (x:Int, y:Int);

var colors = ["green", "red", "blue", "yellow"];
#var priorities = [High, High, Low, Low];
var priorities = [];

# Page Functionality

sig difference: (Point, Point) -> Point
fun difference(a, b){
    (x = a.x - b.x, y= a.y - b.y)
}

sig absolute: (Int) -> Int
fun absolute(n){
    if(n < 0){
        n * -1
    } else{
        n
    }
}

sig parseInt: (String) ~> Maybe(Int)
fun parseInt(n){
    if (n =~ /^[0-9]+$/) {
        Just(stringToInt(n))
    } else{
        Nothing
    }
}

sig setValue: (a, String, (a) ~> String) ~%~> ()
fun setValue(newVal, id, toString){
    ignore(domSetAttributeFromRef(getNodeById(id), "value", toString(newVal)))
}

sig getValue: (String) ~> String
fun getValue(id){
    domGetAttributeFromRef(getNodeById(id), "value")
}

fun updatePoints(startx, starty, endx, endy){
    setValue(startx, "start-x", intToString);
    setValue(starty, "start-y", intToString);
    setValue(endx, "end-x", intToString);
    setValue(endy, "end-y", intToString)
}

sig getPoints: () ~> Maybe((Point, Point))
fun getPoints(){
    var startx = parseInt(getValue("start-x"));
    var starty = parseInt(getValue("start-y"));
    var endx = parseInt(getValue("end-x"));
    var endy = parseInt(getValue("end-y"));
    switch((startx, starty, endx, endy)){
        case (Just(sx), Just(sy), Just(ex), Just(ey)) -> Just((x = sx, y = sy), (x = ex, y = ey))
        case (_, _, _, _) -> Nothing
    }
}

sig drawHorizontalLine: (Point, Point, String) {Yield:() |e}~> ()
fun drawHorizontalLine(start, end, color){
    var div = getNodeById("box");
    var context = jsGetContext2D(div);
    var diff = difference(end, start);
    fun aux(n, start){
        drawCustomUnit(start.x, start.y, 1, 25, color, context);
        Scheduler.yield();
        Scheduler.delayExecution(10);
        if (n > 0) aux(n -1, (x = start.x + (diff.x / absolute(diff.x)), y = start.y))
        else ()
    }
    aux(absolute(diff.x), start)
}

sig drawLineInColor: (Point, Point, String) {Yield:() |e}~> ()
fun drawLineInColor(start, end, color){
    println("start drawing " ^^ color ^^ ", yield.");
    Scheduler.yield();
    drawHorizontalLine((x=start.x, y=start.y), (x=end.x, y=end.y), color);
    Scheduler.yield();
    println("finish drawing " ^^ color)
}

sig addStringToNode: (String, String) ~> ()
fun addStringToNode(string, id){
    var node = getNodeById(id);
    appendChildren(<#><p style="text-align: center;"> {stringToXml(string)} </p></#>, node)
}

sig prepareDrawingFunction: (Point, Point, String) ~> () {Yield:() |e}~> ()
fun prepareDrawingFunction(start, end, color){
    fun(){
        drawLineInColor(start, end, color)
    }
}

sig setUpLineDrawing: (String) ~> () {Yield:() |e}~> ()
fun setUpLineDrawing(color){
    var points = getPoints();
    switch(points){
        case Nothing -> fun(){}
        case Just((start, end)) -> {
            updatePoints(start.x, start.y + 40, end.x , end.y + 40);
            prepareDrawingFunction(start, end, color)
        }
    }
}


fun buttonPressed(){
    var prio = getValueFromSelection("prio");
    var f = setUpLineDrawing(getValueFromSelection("line-color"));
    switch(prio){
        case "High" -> println("enqueue high"); Scheduler.fork(Scheduler.makeFiber(High, f))
        case "Medium" -> println("enqueue medium"); Scheduler.fork(Scheduler.makeFiber(Medium, f))
        case "Low" -> println("enqueue low"); Scheduler.fork(Scheduler.makeFiber(Low, f))
        case _ -> ()
    }
}

fun start(){
    #Scheduler.fork(Scheduler.makeFiber(Low, Scheduler.forever));
    receive {
        case ForkFiber -> buttonPressed()
    };
    start()
}

# Web interface

sig main_page : (_) ~> Page
fun main_page(_){

    var pId = spawnClient{Scheduler.schedule(Scheduler.makeFiber(High, start))};

    page
    <html>
    <head>
        <style>
        .center{{
            margin: 0 auto;
        }}
        .block{{
            display: block;
        }}
        .box{{
            width: 400px;
            height: 600px;
            border: solid 1px #aaa;
        }}
        .buttons{{
            display:flex;
            justify-content: center;
            width: 80%;
        }}
        .button{{
            width: 19%;
            min-width: 90px;
            height: 2.6em;
        }}
        .margin-all-4{{
            margin:4px;
        }}
        .margin-10{{
            margin-top: 10px;
            margin-bottom: 10px;
        }}
        .red{{
            background-color: red;
            color: white;
        }}
        .blue{{
            background-color: blue;
            color: white;
        }}
        .green{{
            background-color: green;
            color: white;
        }}
        .yellow{{
            background-color: yellow;
            color: black;
        }}
        .selection{{
            width: 300px;
            display: flex;
            justify-content: center;
        }}
        </style>
    </head>
    <body>
        <canvas id="box" width="400" height="600" class="box center block"></canvas>
        <div class="selection margin-10 center">
            <select id="line-color">
                <option value="red">Red</option>
                <option value="green">Green</option>
                <option value="blue">Blue</option>
                <option value="yellow">Yellow</option>
                <option value="#801638">Berry </option>
                <option value="#027878">Teal</option>
            </select>
            <select id="prio">
                <option value="Low">Low</option>
                <option value="Medium">Medium</option>
                <option value="High">High</option>
            </select>
        </div>
        <button class="block button center" l:onclick="{pId ! ForkFiber}">Draw Line</button>
        <div id="data" display="none">
            <div id="start-x" value="10"></div>
            <div id="start-y" value="10"></div>
            <div id="end-x" value="390"></div>
            <div id="end-y" value="10"></div>
        </div>
    </body>
    </html>
}

sig main: () ~> ()
fun main() {
    addRoute("/", main_page);
    addStaticRoute("/js", "js", [("js", "text/javascript")]);

    servePages()
}

main()