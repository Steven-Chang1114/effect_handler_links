import Scheduler;
import Scheduler2;
import LineDrawer;
import FiberInterface;

alien javascript "js/runtime.js" {
    delayExecution: (Int) ~> ();
    sysEnqueue: (a) ~> ();
    getRandom: (Int) ~> (Int);
}


# Page functionality

typename Canvas = ();
alien javascript "js/canvas.js" {
    drawCustomUnit: (Int, Int, Int, Int, String, Canvas) ~> ();
    getValueFromSelection: (String) ~> String;
}

typename Point = (x:Int, y:Int);

var colors = ["green", "red", "blue", "yellow"];
var allColors = ["red", "green", "blue", "yellow", "#801638", "#027878"];

#var priorities = [High, High, Low, Low];
var priorities = [];

# Page Functionality

sig drawHorizontalLine: (Point, Point, String) {Yield:() |e}~> ()
fun drawHorizontalLine(start, end, color){
    var div = getNodeById("box");
    var context = jsGetContext2D(div);
    var diff = LineDrawer.difference(end, start);
    fun aux(n, start){
        drawCustomUnit(start.x, start.y, 1, 25, color, context);
        FiberInterface.yield();
        #print("DELAY " ^^ intToString(n) ^^ ", " ^^ intToString(start.x) ^^ ", "  ^^intToString(start.y));
        delayExecution(5);
        if (n > 0) aux(n -1, (x = start.x + (diff.x / LineDrawer.absolute(diff.x)), y = start.y))
        else ()
    }
    aux(LineDrawer.absolute(diff.x), start)
}

fun drawLineInColorBack(start, end, color){
    println("start drawing " ^^ color ^^ ", yield.");
    drawHorizontalLine((x=start.x, y=start.y), (x=end.x, y=end.y), color);
    println("finish drawing " ^^ color)
}

#sig drawLineInColor: (Point, Point, String) {Yield:() |e}~> ()
fun drawLineInColor(start, end, color){
    println("start drawing " ^^ color ^^ ", yield.");
    drawHorizontalLine((x=start.x, y=start.y), (x=end.x, y=end.y), color);
    print("reached top, draw back");
    var curPrio = FiberInterface.getPrio();
    FiberInterface.fork(FiberInterface.makeFiber(Low, fun(){ drawLineInColorBack(end, start, "white") }));
    FiberInterface.setPrio(None);
    println("Getting ready to draw again");
    FiberInterface.setPrio(curPrio);
    drawLineInColor(start, end, color)
}

#sig setUpLineDrawing: (String) ~> () {Yield:() |e}~> ()
fun setUpLineDrawing(color){
    var points = LineDrawer.getPoints();
    switch(points){
        case Nothing -> fun(){}
        case Just((start, end)) -> {
            LineDrawer.updatePoints(start.x, start.y + 40, end.x , end.y + 40);
            fun(){
                drawLineInColor(start, end, color)
            }
        }
    }
}

fun start(){
    FiberInterface.fork(FiberInterface.makeFiber(Low, FiberInterface.forever));
    fun aux(colors, prios){
        switch((colors, prios)){
            case ([],[]) -> ()
            case (x::xs, y::ys) -> FiberInterface.fork(FiberInterface.makeFiber(y, setUpLineDrawing(x))); aux(xs, ys)
            case (_, _) -> ()
        }
    }
    aux(colors, priorities)
}

fun buttonPressed(prio, color){
    var f = setUpLineDrawing(color);
    switch(prio){
        case "High" -> println("enqueue high"); sysEnqueue(FiberInterface.makeFiber(High, f))
        case "Medium" -> println("enqueue low"); sysEnqueue(FiberInterface.makeFiber(Medium, f))
        case "Low" -> println("enqueue low"); sysEnqueue(FiberInterface.makeFiber(Low, f))
        case _ -> ()
    }
}

# Web interface

#sig main_page : (_) ~> Page
fun main_page(schedule){

    var pId = spawnClient{schedule(FiberInterface.makeFiber(High, start))};

    page
    <html>
    <head>
        <style>
        .center{{
            margin: 0 auto;
        }}
        .block{{
            display: block;
        }}
        .box{{
            width: 400px;
            height: 600px;
            border: solid 1px #aaa;
        }}
        a {{
            display:flex;
            justify-content: center; 
        }}
        .buttons{{
            display:flex;
            justify-content: center;
            width: 80%;
        }}
        .button{{
            width: 30%;
            min-width: 150px;
            height: 2.6em;
        }}
        .margin-all-4{{
            margin:4px;
        }}
        .margin-10{{
            margin-top: 10px;
            margin-bottom: 10px;
        }}
        .red{{
            background-color: red;
            color: white;
        }}
        .blue{{
            background-color: blue;
            color: white;
        }}
        .green{{
            background-color: green;
            color: white;
        }}
        .yellow{{
            background-color: yellow;
            color: black;
        }}
        .selection{{
            width: 400px;
            display: flex;
            justify-content: center;
        }}
        </style>
    </head>
    <body>
        <canvas id="box" width="400" height="600" class="box center block"></canvas>
        <div class="selection margin-10 center">
            <button class="block button center" l:onclick="{buttonPressed("Low", "red")}">Draw Low Line</button>
            <button class="block button center" l:onclick="{buttonPressed("Medium", "blue")}">Draw Medium Line</button>
            <button class="block button center" l:onclick="{buttonPressed("High", "green")}">Draw High Line</button>
        </div>
        <a href="/scheduler1.links">Scheduler 1</a>
        <a href="/scheduler2.links">Scheduler 2</a>
        <div id="data" display="none">
            <div id="start-x" value="10"></div>
            <div id="start-y" value="10"></div>
            <div id="end-x" value="390"></div>
            <div id="end-y" value="10"></div>
        </div>
    </body>
    </html>
}

sig main: () ~> ()
fun main() {
    addRoute("/", fun(_) {main_page(Scheduler.schedule)});
    addRoute("/scheduler2.links", fun(_) {main_page(Scheduler2.schedule)});
    addStaticRoute("/js", "js", [("js", "text/javascript")]);

    servePages()
}

main()