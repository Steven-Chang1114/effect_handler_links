open import FiberInterface;
open import Queue;

alien javascript "js/runtime.js" {
    sysDequeue: () ~> [a];
}

typename PrioQueue(a) = (queue: Queue(a));
typename SchedulerState(a) = (runQ: PrioQueue(a), prio: Priority, count: Int);
typename Fiber(e::Eff) = (prio:Priority, f: (SchedulerState(Fiber({ |e}))) ~e~> ());
typename FiberQueue(e::Eff) = PrioQueue(Fiber({ |e}));

sig fiberEnqueue: (Fiber({ |e}), FiberQueue({ |e})) ~> FiberQueue({ |e})
fun fiberEnqueue(f, pq){
    (pq with queue = enqueue(f, pq.queue))
}

sig fiberBulkEnqueue: ([Fiber({ |e})], FiberQueue({ |e})) ~> FiberQueue({ |e})
fun fiberBulkEnqueue(fibers, q){
    switch(fibers){
        case [] -> q
        case x::xs ->
            var pq = fiberEnqueue(x, q);
            fiberBulkEnqueue(xs, pq)
    }
}

#sig fiberDequeue: (FiberQueue({ |e})) ~> (Maybe((Fiber({ |e}), Priority)), FiberQueue({ |e}))
fun fiberDequeue(pq){
    switch(dequeue(pq.queue)){
        case (Nothing, _) -> print("Dequeue empty"); (Nothing, pq)
        case (Just(x), q) -> (Just((x, x.prio)), (pq with queue=q))
    }
}

fun emptyPrioQueue(){
    (queue=emptyQueue())
}

sig fiberQueueLength: (FiberQueue({ |e}))  -> Int
fun fiberQueueLength(q){
    length(q.queue.rear) + length(q.queue.front)
}

#sig schedule: (Fiber0({ |e})) {Yield-, Fork- | e}~> ()
fun schedule(fib){

    #sig makeSchedulerState: (Priority, PrioQueue(a)) ~> SchedulerState(a)
    fun makeSchedulerState(prio, q){
        (runQ = q, prio = prio, count = 0)
    }

    fun runNext(q){
        switch(fiberDequeue(q)){
            case (Nothing, _) -> ()
            case (Just((fiber, prio)), q) -> fiber.f(makeSchedulerState(prio, q))
        }
    }

    fun resumptionToFiber(resume, prio){
        (prio = prio, f = fun(state) { resume((), state) })
    }

    mutual {
        #sig fiber0ToFiber: (Fiber0({ |%e})) ~%~> Fiber({ |%e})
        fun fiber0ToFiber(fiber){
            (prio = fiber.prio, f = fun(state) { runFiber(fiber, state.runQ ) })
        }

        #sig poll: (FiberQueue({ |e})) ~> FiberQueue({ |e})
        fun poll(q){
            var enqueue = map(fiber0ToFiber, sysDequeue());
            fiberBulkEnqueue(enqueue, q)
        }

        fun runFiber(fiber, runQ){
            println("runQ: " ^^ intToString(fiberQueueLength(runQ)));
            #dump(self());
            handle(fiber.f()) ( state <- (prio=fiber.prio, runQ=runQ, count = 0) ){
                case x ->
                    print("RETURN");
                    runNext(poll(state.runQ))
                case <Fork(f) => resume> ->
                        print("fork");
                        var q = poll(state.runQ);
                        # f is new fiber, state.prio is the current fiber
                        switch ((f.prio, state.prio)) {
                        case (High, _) ->
                            # Enqueue the current fiber, run the new fiber
                            print("High fiber enqueued");
                            var qq = fiberEnqueue(resumptionToFiber(resume, state.prio), q);
                            runFiber(f, qq)
                        case (Medium, High) ->
                            print("Medium high fiber enqueued");
                            # Enqueue the new fiber, run the current fiber
                            var qq = fiberEnqueue(fiber0ToFiber(f), q);
                            resume((), (state with runQ = qq))
                        case (Medium, _) ->
                            print("Medium fiber enqueued");
                            # Enqueue the new fiber, run the current fiber
                            var qq = fiberEnqueue(resumptionToFiber(resume, state.prio), q);
                            runFiber(f, qq)
                        case (_, High) ->
                            # Enqueue the new fiber, run the current fiber
                            print("Low High fiber enqueued");
                            var qq = fiberEnqueue(fiber0ToFiber(f), q);
                            resume((), (state with runQ = qq))
                        case (_, Medium) ->
                            # Enqueue the new fiber, run the current fiber
                            print("Low Medium fiber enqueued");
                            var qq = fiberEnqueue(fiber0ToFiber(f), q);
                            resume((), (state with runQ = qq))
                        case (_,_) ->
                            # Enqueue the current fiber, run the new fiber
                            print("Low fiber enqueued");
                            var qq = fiberEnqueue(resumptionToFiber(resume, state.prio), q);
                            runFiber(f, qq)
                        }
                case <Yield => resume> ->
                    #print("YIELD");
                    var steps = switch(state.prio){
                        case High -> 40
                        case Medium -> 20
                        case Low -> 10
                        case None -> 0
                    };
                    var c = state.count + 1;

                    if (c < steps) {
                        #print("RESUME"); 
                        resume((), (state with count = c))
                    } else{
                        #print("SWITCH");
                        var q = fiberEnqueue(resumptionToFiber(resume, state.prio), state.runQ);
                        runNext(poll(q))
                    }
            }
        }
    }

    runFiber(fib, emptyPrioQueue())

}