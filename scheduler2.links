alien javascript "js/runtime.js" {
    delayExecution: (Int) ~> ();
    sysEnqueue: (a) ~> ();
    sysDequeue: () ~> [a];
}

typename Queue(a) = (rear: [a], front: [a]);
typename PrioQueue(a) = (high: Queue(a), medium: Queue(a), low: Queue(a), alt: Queue(a));
typename Priority = [|High|Medium|Low|];
typename Fiber0(e::Eff) = (prio: Priority, f: () {Fork: (Fiber0({ |e})) => (), Yield:() |e}~> ());
typename SchedulerState(a) = (runQ: PrioQueue(a), prio: Priority, count: Int);
typename Fiber(e::Eff) = (prio:Priority, f: (SchedulerState(Fiber({ |e}))) ~e~> ());
typename FiberQueue(e::Eff) = PrioQueue(Fiber({ |e}));

sig enqueue: (a, Queue(a)) -> Queue(a)
fun enqueue(x, q){
    (q with rear=x::q.rear)
}

sig dequeue: (Queue(a)) ~> (Maybe(a), Queue(a))
fun dequeue(q){
    switch(q) {
        case (rear=[], front=[]) -> (Nothing, q)
        case (rear=xs, front=[]) ->
          var q0 = (rear=[], front=reverse(xs));
          dequeue(q0)
        case (rear=ys, front=(x :: xs)) ->
          var q0 = (rear=ys, front=xs);
          (Just(x), q0)
    }
}

sig fiberAltEnqueue: (Fiber({ |e}), FiberQueue({ |e})) ~> FiberQueue({ |e})
fun fiberAltEnqueue(f, pq){
    (pq with alt = enqueue(f, pq.alt))
}

sig fiberBulkAltEnqueue: ([Fiber({ |e})], FiberQueue({ |e})) ~> FiberQueue({ |e})
fun fiberBulkAltEnqueue(fibers, q){
    switch(fibers){
        case [] -> q
        case x::xs ->
            var pq = fiberAltEnqueue(x, q);
            fiberBulkAltEnqueue(xs, pq)
    }
}

#sig fiberAltDequeue: (FiberQueue({ |e})) ~> (Maybe((Fiber({ |e}), Priority)), FiberQueue({ |e}))
fun fiberAltDequeue(pq){
    switch(dequeue(pq.alt)){
        case (Nothing, _) -> print("Dequeue empty"); (Nothing, pq)
        case (Just(x), q) -> (Just((x, x.prio)), (pq with alt=q))
    }
}

fun emptyQueue(){
    (rear=[], front=[])
}

fun emptyPrioQueue(){
    (high= emptyQueue(), medium=emptyQueue(), low=emptyQueue(), alt=emptyQueue())
}

sig fiberQueueLength: (FiberQueue({ |e}))  -> Int
fun fiberQueueLength(q){
    length(q.low.rear) + length(q.high.front) + length(q.high.rear) + length(q.medium.front) + length(q.medium.rear) + length(q.low.front)
}

sig fork : (Fiber0({ |e})) {Fork: (Fiber0({ |e})) => (), Yield:() |e}~> ()
fun fork(f){
    do Fork(f)
}

sig yield: () {Yield:() |e}~> ()
fun yield(){
    do Yield
}

sig makeFiber: (Priority, () {Fork: (Fiber0({ |e})) => (), Yield:() |e}~> ()) -> Fiber0({ |e})
fun makeFiber(prio, f){
    (prio= prio, f=f)
}

sig forever: () {Yield:() |e}~> ()
fun forever(){ yield(); forever()}

#sig schedule: (Fiber0({ |e})) {Yield-, Fork- | e}~> ()
fun schedule(fib){

    #sig makeSchedulerState: (Priority, PrioQueue(a)) ~> SchedulerState(a)
    fun makeSchedulerState(prio, q){
        (runQ = q, prio = prio, count = 0)
    }

    fun runNextAlt(q){
        switch(fiberAltDequeue(q)){
            case (Nothing, _) -> ()
            case (Just((fiber, prio)), q) -> fiber.f(makeSchedulerState(prio, q))
        }
    }

    fun resumptionToFiber(resume, prio){
        (prio = prio, f = fun(state) { resume((), state) })
    }

    mutual {
      #sig fiber0ToFiber: (Fiber0({ |%e})) ~%~> Fiber({ |%e})
      fun fiber0ToFiber(fiber){
          (prio = fiber.prio, f = fun(state) { runFiber(fiber, state.runQ ) })
      }

      #sig pollAlt: (FiberQueue({ |e})) ~> FiberQueue({ |e})
      fun pollAlt(q){
          var enqueue = map(fiber0ToFiber, sysDequeue());
          fiberBulkAltEnqueue(enqueue, q)
      }

      fun runFiber(fiber, runQ){
          println("runQ: " ^^ intToString(fiberQueueLength(runQ)));
          #dump(self());
          handle(fiber.f()) ( state <- (prio=fiber.prio, runQ=runQ, count = 0) ){
              case x ->
                    print("RETURN");
                  runNextAlt(pollAlt(state.runQ))
              case <Fork(f) => resume> ->
                    print("fork");
                    var q = pollAlt(state.runQ);
                    # f is new fiber, state.prio is the current fiber
                    switch ((f.prio, state.prio)) {
                      case (High, _) ->
                          # Enqueue the current fiber, run the new fiber
                          print("High fiber enqueued");
                          var qq = fiberAltEnqueue(resumptionToFiber(resume, state.prio), q);
                          runFiber(f, qq)
                      case (Medium, High) ->
                        print("Medium high fiber enqueued");
                          # Enqueue the new fiber, run the current fiber
                          var qq = fiberAltEnqueue(fiber0ToFiber(f), q);
                          resume((), (state with runQ = qq))
                      case (Medium, _) ->
                        print("Medium fiber enqueued");
                          # Enqueue the new fiber, run the current fiber
                          var qq = fiberAltEnqueue(resumptionToFiber(resume, state.prio), q);
                          runFiber(f, qq)
                      case (_, High) ->
                          # Enqueue the new fiber, run the current fiber
                          print("Low High fiber enqueued");
                          var qq = fiberAltEnqueue(fiber0ToFiber(f), q);
                          resume((), (state with runQ = qq))
                      case (_, Medium) ->
                          # Enqueue the new fiber, run the current fiber
                          print("Low Medium fiber enqueued");
                          var qq = fiberAltEnqueue(fiber0ToFiber(f), q);
                          resume((), (state with runQ = qq))
                      case (_,_) ->
                          # Enqueue the current fiber, run the new fiber
                          print("Low fiber enqueued");
                          var qq = fiberAltEnqueue(resumptionToFiber(resume, state.prio), q);
                          runFiber(f, qq)
                    }
              case <Yield => resume> ->
                    #print("YIELD");
                  var step = switch(state.prio){
                      case High -> 40
                      case Medium ->20
                      case Low -> 10
                  };
                  var c = state.count + 1;

                  if (c < step) {
                    #print("RESUME"); 
                    resume((), (state with count = c))
                  } else{
                    #print("SWITCH");
                      var q = fiberAltEnqueue(resumptionToFiber(resume, state.prio), state.runQ);
                      runNextAlt(pollAlt(q))
                  }
          }
      }
    }

    runFiber(fib, emptyPrioQueue())

}

fun main() {
    addStaticRoute("/js", "js", [("js", "text/javascript")])
}

main()